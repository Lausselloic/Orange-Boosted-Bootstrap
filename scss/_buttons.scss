// stylelint-disable custom-property-empty-line-before

//
// Base styles
//

.btn {
  // scss-docs-start btn-css-vars
  --#{$variable-prefix}btn-padding-x: #{$btn-padding-x};
  --#{$variable-prefix}btn-padding-y: #{$btn-padding-y};
  --#{$variable-prefix}btn-font-family: #{$btn-font-family};
  @include rfs($btn-font-size, --#{$variable-prefix}btn-font-size);
  --#{$variable-prefix}btn-font-weight: #{$btn-font-weight};
  --#{$variable-prefix}btn-line-height: #{$btn-line-height};
  --#{$variable-prefix}btn-color: #{$body-color};
  --#{$variable-prefix}btn-bg: transparent;
  --#{$variable-prefix}btn-border-width: #{$btn-border-width};
  --#{$variable-prefix}btn-border-color: transparent;
  --#{$variable-prefix}btn-border-radius: #{$btn-border-radius};
  --#{$variable-prefix}btn-box-shadow: #{$btn-box-shadow};
  --#{$variable-prefix}btn-disabled-opacity: #{$btn-disabled-opacity};
  --#{$variable-prefix}btn-focus-box-shadow: 0 0 0 #{$btn-focus-width} var(--#{$variable-prefix}btn-focus-shadow-rgb); // Boosted mod
  --#{$boosted-variable-prefix}icon-spacing: #{$btn-icon-padding-x}; // Boosted mod
  // scss-docs-end btn-css-vars

  display: inline-flex; // Boosted mod
  align-items: center; // Boosted mod: for .badge proper alignment
  justify-content: center; // Boosted mod
  padding: subtract(var(--#{$variable-prefix}btn-padding-y), 1px) var(--#{$variable-prefix}btn-padding-x) add(var(--#{$variable-prefix}btn-padding-y), 1px); // Boosted mod
  font-family: var(--#{$variable-prefix}btn-font-family);
  font-size: var(--#{$variable-prefix}btn-font-size);
  font-weight: var(--#{$variable-prefix}btn-font-weight);
  line-height: var(--#{$variable-prefix}btn-line-height);
  color: var(--#{$variable-prefix}btn-color);
  text-decoration: if($link-decoration == none, null, none);
  white-space: $btn-white-space;
  vertical-align: middle;
  cursor: if($enable-button-pointers, pointer, null);
  user-select: none;
  border: var(--#{$variable-prefix}btn-border-width) solid var(--#{$variable-prefix}btn-border-color);
  outline-offset: map-get($spacers, 1); // Boosted mod
  @include border-radius(var(--#{$variable-prefix}btn-border-radius));
  @include gradient-bg(var(--#{$variable-prefix}btn-bg));
  @include box-shadow(var(--#{$variable-prefix}btn-box-shadow));
  @include transition($btn-transition);

  &:hover {
    color: var(--#{$variable-prefix}btn-hover-color);
    text-decoration: if($link-hover-decoration == underline, none, null);
    background-color: var(--#{$variable-prefix}btn-hover-bg);
    border-color: var(--#{$variable-prefix}btn-hover-border-color);
  }

  // Boosted mod: custom styles for .btn-check
  &:focus {
    color: var(--#{$variable-prefix}btn-hover-color);
    @include gradient-bg(var(--#{$variable-prefix}btn-hover-bg));
    border-color: var(--#{$variable-prefix}btn-hover-border-color);
    // Boosted mod: no `outline` rule
    outline-color: var(--#{$variable-prefix}btn-hover-border-color); // Boosted mod
    outline-offset: $outline-width; // Boosted mod
    &[data-focus-visible-added] { // Boosted mod: added `&[data-focus-visible-added]`
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows {
        box-shadow: var(--#{$variable-prefix}btn-box-shadow), var(--#{$variable-prefix}btn-focus-box-shadow);
      } @else {
        box-shadow: var(--#{$variable-prefix}btn-focus-box-shadow);
      }
    }
  }

  // Boosted mod: custom styles for .btn-check
  &:active,
  &.active,
  .show > &.dropdown-toggle {
    color: var(--#{$variable-prefix}btn-active-color);
    background-color: var(--#{$variable-prefix}btn-active-bg);
    // Remove CSS gradients if they're enabled
    background-image: if($enable-gradients, none, null);
    border-color: var(--#{$variable-prefix}btn-active-border-color);
    outline-color: var(--#{$variable-prefix}btn-active-border-color); // Boosted mod
    // Boosted mod: no box shadow modification for the active state
  }

  &:disabled,
  &.disabled,
  fieldset:disabled & {
    color: var(--#{$variable-prefix}btn-disabled-color);
    pointer-events: none;
    background-color: var(--#{$variable-prefix}btn-disabled-bg);
    background-image: if($enable-gradients, none, null);
    border-color: var(--#{$variable-prefix}btn-disabled-border-color);
    opacity: var(--#{$variable-prefix}btn-disabled-opacity);
    @include box-shadow(none);
  }

  // Boosted mod: with icon
  &:not(.btn-icon) > svg {
    transform: translateY(1px);
  }
  // End mod
}


//
// Alternate buttons
//

// Boosted mod: inconsistent theming ¯\_(ツ)_/¯
// scss-docs-start btn-variant-loops
.btn-primary,
.btn-warning {
  @include button-variant($primary, $primary, $active-background: $white, $active-border: $black);
  &.btn-inverse {
    @include button-variant($primary, $primary, $black, $white, $white, $black, $black, $white, $white, $gray-700, $gray-700, $black, $black);
  }
}

.btn-light,
.btn-secondary {
  @include button-variant($white, $black, $disabled-background: $white, $disabled-border: $gray-500, $disabled-color: $gray-500);
  &.btn-inverse {
    @include button-variant($black, $white, $white, $white, $white, $black, $primary, $primary, $black, transparent, $gray-700, $gray-700, $black);
  }
}

.btn-success {
  @include button-variant($success, $success);
  &.btn-inverse {
    @include button-variant($success, $success, $black,  $white, $white, $black, $primary, $primary, $black, $gray-700, $gray-700, $black, $black);
  }
}

.btn-info,
.btn-dark {
  @include button-variant($black, $black, $white, $white, $black, $black);
  &.btn-inverse {
    @include button-variant($white, $white, $black, $black, $white, $white, $primary, $primary, $black, $gray-700, $gray-700, $black, $black);
  }
}

.btn-danger {
  @include button-variant($danger, $danger);
  &.btn-inverse {
    @include button-variant($danger, $danger, $white, $white, $white, $black, $primary, $primary, $black, $gray-700, $gray-700, $black, $black);
  }
}
// scss-docs-end btn-variant-loops
// End mod

// Boosted mod: no .btn-outline

// Boosted mod: border-only on :hover, :focus and :active
.btn-no-outline {
  &:hover,
  &:focus,
  &:active,
  &.active {
    border-color: $gray-500;
  }

  &:active,
  &.active {
    color: $accessible-orange;
    background-color: var(--#{$variable-prefix}btn-bg);
  }

  &:disabled,
  &.disabled {
    color: $gray-500;
    border-color: var(--#{$variable-prefix}btn-border-color);
  }

  &.btn-inverse:not(:active) {
    color: $white;
  }
}
// End mod


//
// Link buttons
//

// Make a button look and behave like a link
.btn-link {
  // Boosted mod: no redefinition of --#{$variable-prefix}btn-font-weight: #{$font-weight-normal}
  --#{$variable-prefix}btn-color: #{$btn-link-color};
  --#{$variable-prefix}btn-bg: transparent;
  --#{$variable-prefix}btn-border-color: transparent;
  --#{$variable-prefix}btn-hover-color: #{$btn-link-hover-color};
  --#{$variable-prefix}btn-hover-border-color: transparent;
  --#{$variable-prefix}btn-active-color: #{$primary}; // Boosted mod
  --#{$variable-prefix}btn-active-border-color: transparent;
  --#{$variable-prefix}btn-disabled-color: #{$btn-link-disabled-color};
  --#{$variable-prefix}btn-disabled-border-color: transparent;
  --#{$variable-prefix}btn-box-shadow: none;

  text-decoration: $link-decoration;

  &:hover,
  &:focus {
    text-decoration: $link-hover-decoration;
  }

  // Boosted mod
  &:focus {
    &:not(:hover) {
      color: var(--#{$variable-prefix}btn-color);
      outline-color: var(--#{$variable-prefix}btn-color);
    }

    &:hover {
      outline-color: var(--#{$variable-prefix}btn-active-color);
    }
  }
  // End mod

  // No need for an active state here
}


//
// Button Sizes
// Boosted mod: 6th argument to set .btn-icon padding

.btn-lg {
  @include button-size($btn-padding-y-lg, $btn-padding-x-lg, $btn-font-size-lg, $btn-border-radius-lg, $btn-line-height-lg, $btn-icon-padding-x-lg);
}

.btn-sm {
  @include button-size($btn-padding-y-sm, $btn-padding-x-sm, $btn-font-size-sm, $btn-border-radius-sm, $btn-line-height-sm, $btn-icon-padding-x-sm);
}


// Boosted mod: icon button
.btn-icon {
  padding: var(--#{$boosted-variable-prefix}icon-spacing);
}
// End mod

// Boosted mod: social button
.btn-social {
  border-color: currentColor;
  @include border-radius(50%, 50%);
  @include button-icon(var(--#{$boosted-variable-prefix}network-logo));

  &:hover,
  &:focus {
    color: $white;
    background-color: var(--#{$boosted-variable-prefix}network-color, $black);
    border-color: var(--#{$boosted-variable-prefix}network-color, $black);
    outline-color: var(--#{$boosted-variable-prefix}network-color, $black);
  }

  &:active,
  &.active {
    color: $white;
    background-color: $black;
    border-color: $black;
  }
}

@each $name in map-keys($btn-social-networks) {
  $network: map-get($btn-social-networks, $name);

  .btn-#{$name} {
    --#{$boosted-variable-prefix}network-color: #{map-get($network, "color")};
    --#{$boosted-variable-prefix}network-logo: #{escape-svg(url("data:image/svg+xml,#{map-get($network, "icon")}"))};

    &.btn-inverse {
      color: $white;

      &:active {
        color: $black;
        background-color: $white;
      }
    }

    &::before {
      mask-size: if(map-has-key($network, "size"), map-get($network, "size"), null);

      @if "linkedin" == $name {
        transform: translateY(-1px);
      }
    }
  }
}
// End mod
