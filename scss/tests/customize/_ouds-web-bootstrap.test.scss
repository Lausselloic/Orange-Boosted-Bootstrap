@import "../../functions";
@import "../../tokens/raw";
@import "../../tokens/semantic";
@import "../../tokens/component";
@import "../../variables";
@import "../../maps";
@import "../../mixins";

$utilities: ();

@include describe("customize/ouds-web-bootstrap") {
  @include it("generates OUDS and Bootstrap utilities") {
    $enable-bootstrap-compatibility: false !global;

    $utilities: (
      "opacity": (
        property: opacity,
        values: (
          0: 0,
          25: .25,
          50: .5,
          75: .75,
          100: 1,
        ),
        bootstrap-compatibility: true
      ),
      "opacity-ouds": (
        property: opacity,
        values: $ouds-opacities
      ),
      "border": (
        property: border,
        values: (
          0: 0,
        ),
        bootstrap-compatibility: true
      ),
      "border-ouds": (
        property: border,
        values: (
          null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
          "none": 0,
        ),
      ),
      "border-top": (
        property: border-top,
        values: (
          0: 0,
        ),
        bootstrap-compatibility: true
      ),
      "border-top-ouds": (
        property: border-top,
        values: (
          null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
          "none": 0,
        ),
      ),
      "border-end": (
        property: border-right,
        class: border-end,
        values: (
          0: 0,
        ),
        bootstrap-compatibility: true
      ),
      "border-end-ouds": (
        property: border-right,
        class: border-end,
        values: (
          null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
          "none": 0,
        ),
      ),
      "border-bottom": (
        property: border-bottom,
        values: (
          0: 0,
        ),
        bootstrap-compatibility: true
      ),
      "border-bottom-ouds": (
        property: border-bottom,
        values: (
          null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
          "none": 0,
        ),
      ),
      "border-start": (
        property: border-left,
        class: border-start,
        values: (
          0: 0,
        ),
        bootstrap-compatibility: true
      ),
      "border-start-ouds": (
        property: border-left,
        class: border-start,
        values: (
          null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
          "none": 0,
        ),
      ),
      "border-color": (
        property: border-color,
        class: border,
        local-vars: (
          "border-opacity": 1
        ),
        values: $utilities-border-colors
      ),
      "subtle-border-color": (
        property: border-color,
        class: border,
        values: $utilities-border-subtle
      ),
      "border-width": (
        property: border-width,
        class: border,
        values: $border-widths,
        bootstrap-compatibility: true
      ),
      "border-width-ouds": (
        property: border-width,
        class: border,
        values: $ouds-border-widths
      ),
      "border-opacity": (
        css-var: true,
        class: border-opacity,
        values: (
          10: .1,
          25: .25,
          50: .5,
          75: .75,
          100: 1
        ),
        bootstrap-compatibility: true
      ),
      "border-style-ouds": (
        property: border-style,
        class: border,
        values: $ouds-border-styles
      ),
    ) !global;

    @include assert() {
      @include output() {
        @import "../../utilities/api";
      }
      @include expect() {
        .opacity-transparent {
          opacity: 0 !important;
        }

        .opacity-weaker {
          opacity: .04 !important;
        }

        .opacity-weak {
          opacity: .16 !important;
        }

        .opacity-medium {
          opacity: .32 !important;
        }

        .opacity-emphasis {
          opacity: .64 !important;
        }

        .opacity-opaque {
          opacity: 1 !important;
        }

        .border {
          border: var(--bs-border-width) var(--bs-border-style) var(--bs-border-color) !important;
        }

        .border-none {
          border: 0 !important;
        }

        .border-top {
          border-top: var(--bs-border-width) var(--bs-border-style) var(--bs-border-color) !important;
        }

        .border-top-none {
          border-top: 0 !important;
        }

        .border-end {
          border-right: var(--bs-border-width) var(--bs-border-style) var(--bs-border-color) !important;
        }

        .border-end-none {
          border-right: 0 !important;
        }

        .border-bottom {
          border-bottom: var(--bs-border-width) var(--bs-border-style) var(--bs-border-color) !important;
        }

        .border-bottom-none {
          border-bottom: 0 !important;
        }

        .border-start {
          border-left: var(--bs-border-width) var(--bs-border-style) var(--bs-border-color) !important;
        }

        .border-start-none {
          border-left: 0 !important;
        }

        .border-primary {
          --bs-border-opacity: 1;
          border-color: rgba(var(--bs-primary-rgb), var(--bs-border-opacity)) !important;
        }

        .border-secondary {
          --bs-border-opacity: 1;
          border-color: rgba(var(--bs-secondary-rgb), var(--bs-border-opacity)) !important;
        }

        .border-success {
          --bs-border-opacity: 1;
          border-color: rgba(var(--bs-success-rgb), var(--bs-border-opacity)) !important;
        }

        .border-info {
          --bs-border-opacity: 1;
          border-color: rgba(var(--bs-info-rgb), var(--bs-border-opacity)) !important;
        }

        .border-warning {
          --bs-border-opacity: 1;
          border-color: rgba(var(--bs-warning-rgb), var(--bs-border-opacity)) !important;
        }

        .border-danger {
          --bs-border-opacity: 1;
          border-color: rgba(var(--bs-danger-rgb), var(--bs-border-opacity)) !important;
        }

        .border-light {
          --bs-border-opacity: 1;
          border-color: rgba(204, 204, 204, var(--bs-border-opacity)) !important;
        }

        .border-dark {
          --bs-border-opacity: 1;
          border-color: rgba(102, 102, 102, var(--bs-border-opacity)) !important;
        }

        .border-black {
          --bs-border-opacity: 1;
          border-color: rgba(var(--bs-black-rgb), var(--bs-border-opacity)) !important;
        }

        .border-white {
          --bs-border-opacity: 1;
          border-color: rgba(var(--bs-white-rgb), var(--bs-border-opacity)) !important;
        }

        .border-primary-subtle {
          border-color: var(--bs-primary-border-subtle) !important;
        }

        .border-secondary-subtle {
          border-color: var(--bs-secondary-border-subtle) !important;
        }

        .border-success-subtle {
          border-color: var(--bs-success-border-subtle) !important;
        }

        .border-info-subtle {
          border-color: var(--bs-info-border-subtle) !important;
        }

        .border-warning-subtle {
          border-color: var(--bs-warning-border-subtle) !important;
        }

        .border-danger-subtle {
          border-color: var(--bs-danger-border-subtle) !important;
        }

        .border-light-subtle {
          border-color: var(--bs-light-border-subtle) !important;
        }

        .border-dark-subtle {
          border-color: var(--bs-dark-border-subtle) !important;
        }

        .border-thin {
          border-width: 1px !important;
        }

        .border-thick {
          border-width: 2px !important;
        }

        .border-thicker {
          border-width: 3px !important;
        }

        .border-thickest {
          border-width: 4px !important;
        }

        .border-drag {
          border-style: dashed !important;
        }
      }
    }
  }

  @include it("generates only OUDS utilities") {
    $enable-bootstrap-compatibility: true !global;

    $utilities: (
      "opacity": (
        property: opacity,
        values: (
          0: 0,
          25: .25,
          50: .5,
          75: .75,
          100: 1,
        ),
        bootstrap-compatibility: true
      ),
      "opacity-ouds": (
        property: opacity,
        values: $ouds-opacities
      ),
      "border": (
        property: border,
        values: (
          0: 0,
        ),
        bootstrap-compatibility: true
      ),
      "border-ouds": (
        property: border,
        values: (
          null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
          "none": 0,
        ),
      ),
      "border-top": (
        property: border-top,
        values: (
          0: 0,
        ),
        bootstrap-compatibility: true
      ),
      "border-top-ouds": (
        property: border-top,
        values: (
          null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
          "none": 0,
        ),
      ),
      "border-end": (
        property: border-right,
        class: border-end,
        values: (
          0: 0,
        ),
        bootstrap-compatibility: true
      ),
      "border-end-ouds": (
        property: border-right,
        class: border-end,
        values: (
          null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
          "none": 0,
        ),
      ),
      "border-bottom": (
        property: border-bottom,
        values: (
          0: 0,
        ),
        bootstrap-compatibility: true
      ),
      "border-bottom-ouds": (
        property: border-bottom,
        values: (
          null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
          "none": 0,
        ),
      ),
      "border-start": (
        property: border-left,
        class: border-start,
        values: (
          0: 0,
        ),
        bootstrap-compatibility: true
      ),
      "border-start-ouds": (
        property: border-left,
        class: border-start,
        values: (
          null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
          "none": 0,
        ),
      ),
      "border-color": (
        property: border-color,
        class: border,
        local-vars: (
          "border-opacity": 1
        ),
        values: $utilities-border-colors
      ),
      "subtle-border-color": (
        property: border-color,
        class: border,
        values: $utilities-border-subtle
      ),
      "border-width": (
        property: border-width,
        class: border,
        values: $border-widths,
        bootstrap-compatibility: true
      ),
      "border-width-ouds": (
        property: border-width,
        class: border,
        values: $ouds-border-widths
      ),
      "border-opacity": (
        css-var: true,
        class: border-opacity,
        values: (
          10: .1,
          25: .25,
          50: .5,
          75: .75,
          100: 1
        ),
        bootstrap-compatibility: true
      ),
      "border-style-ouds": (
        property: border-style,
        class: border,
        values: $ouds-border-styles
      ),
    ) !global;

    @include assert() {
      @include output() {
        @import "../../utilities/api"; // stylelint-disable-line no-duplicate-at-import-rules
      }
      @include expect() {
        .opacity-0 {
          opacity: 0 !important;
        }

        .opacity-25 {
          opacity: .25 !important;
        }

        .opacity-50 {
          opacity: .5 !important;
        }

        .opacity-75 {
          opacity: .75 !important;
        }

        .opacity-100 {
          opacity: 1 !important;
        }

        .opacity-transparent {
          opacity: 0 !important;
        }

        .opacity-weaker {
          opacity: .04 !important;
        }

        .opacity-weak {
          opacity: .16 !important;
        }

        .opacity-medium {
          opacity: .32 !important;
        }

        .opacity-emphasis {
          opacity: .64 !important;
        }

        .opacity-opaque {
          opacity: 1 !important;
        }

        .border-0 {
          border: 0 !important;
        }

        .border {
          border: var(--bs-border-width) var(--bs-border-style) var(--bs-border-color) !important;
        }

        .border-none {
          border: 0 !important;
        }

        .border-top-0 {
          border-top: 0 !important;
        }

        .border-top {
          border-top: var(--bs-border-width) var(--bs-border-style) var(--bs-border-color) !important;
        }

        .border-top-none {
          border-top: 0 !important;
        }

        .border-end-0 {
          border-right: 0 !important;
        }

        .border-end {
          border-right: var(--bs-border-width) var(--bs-border-style) var(--bs-border-color) !important;
        }

        .border-end-none {
          border-right: 0 !important;
        }

        .border-bottom-0 {
          border-bottom: 0 !important;
        }

        .border-bottom {
          border-bottom: var(--bs-border-width) var(--bs-border-style) var(--bs-border-color) !important;
        }

        .border-bottom-none {
          border-bottom: 0 !important;
        }

        .border-start-0 {
          border-left: 0 !important;
        }

        .border-start {
          border-left: var(--bs-border-width) var(--bs-border-style) var(--bs-border-color) !important;
        }

        .border-start-none {
          border-left: 0 !important;
        }

        .border-primary {
          --bs-border-opacity: 1;
          border-color: rgba(var(--bs-primary-rgb), var(--bs-border-opacity)) !important;
        }

        .border-secondary {
          --bs-border-opacity: 1;
          border-color: rgba(var(--bs-secondary-rgb), var(--bs-border-opacity)) !important;
        }

        .border-success {
          --bs-border-opacity: 1;
          border-color: rgba(var(--bs-success-rgb), var(--bs-border-opacity)) !important;
        }

        .border-info {
          --bs-border-opacity: 1;
          border-color: rgba(var(--bs-info-rgb), var(--bs-border-opacity)) !important;
        }

        .border-warning {
          --bs-border-opacity: 1;
          border-color: rgba(var(--bs-warning-rgb), var(--bs-border-opacity)) !important;
        }

        .border-danger {
          --bs-border-opacity: 1;
          border-color: rgba(var(--bs-danger-rgb), var(--bs-border-opacity)) !important;
        }

        .border-light {
          --bs-border-opacity: 1;
          border-color: rgba(204, 204, 204, var(--bs-border-opacity)) !important;
        }

        .border-dark {
          --bs-border-opacity: 1;
          border-color: rgba(102, 102, 102, var(--bs-border-opacity)) !important;
        }

        .border-black {
          --bs-border-opacity: 1;
          border-color: rgba(var(--bs-black-rgb), var(--bs-border-opacity)) !important;
        }

        .border-white {
          --bs-border-opacity: 1;
          border-color: rgba(var(--bs-white-rgb), var(--bs-border-opacity)) !important;
        }

        .border-primary-subtle {
          border-color: var(--bs-primary-border-subtle) !important;
        }

        .border-secondary-subtle {
          border-color: var(--bs-secondary-border-subtle) !important;
        }

        .border-success-subtle {
          border-color: var(--bs-success-border-subtle) !important;
        }

        .border-info-subtle {
          border-color: var(--bs-info-border-subtle) !important;
        }

        .border-warning-subtle {
          border-color: var(--bs-warning-border-subtle) !important;
        }

        .border-danger-subtle {
          border-color: var(--bs-danger-border-subtle) !important;
        }

        .border-light-subtle {
          border-color: var(--bs-light-border-subtle) !important;
        }

        .border-dark-subtle {
          border-color: var(--bs-dark-border-subtle) !important;
        }

        .border-1 {
          border-width: 1px !important;
        }

        .border-2 {
          border-width: 2px !important;
        }

        .border-3 {
          border-width: 3px !important;
        }

        .border-4 {
          border-width: 4px !important;
        }

        .border-5 {
          border-width: 5px !important;
        }

        .border-thin {
          border-width: 1px !important;
        }

        .border-thick {
          border-width: 2px !important;
        }

        .border-thicker {
          border-width: 3px !important;
        }

        .border-thickest {
          border-width: 4px !important;
        }

        .border-opacity-10 {
          // Sass compilation will put a leading zero so we want to keep that one
          // stylelint-disable-next-line @stylistic/number-leading-zero
          --bs-border-opacity: 0.1;
        }

        .border-opacity-25 {
          // Sass compilation will put a leading zero so we want to keep that one
          // stylelint-disable-next-line @stylistic/number-leading-zero
          --bs-border-opacity: 0.25;
        }

        .border-opacity-50 {
          // Sass compilation will put a leading zero so we want to keep that one
          // stylelint-disable-next-line @stylistic/number-leading-zero
          --bs-border-opacity: 0.5;
        }

        .border-opacity-75 {
          // Sass compilation will put a leading zero so we want to keep that one
          // stylelint-disable-next-line @stylistic/number-leading-zero
          --bs-border-opacity: 0.75;
        }

        .border-opacity-100 {
          --bs-border-opacity: 1;
        }

        .border-drag {
          border-style: dashed !important;
        }
      }
    }
  }
}
